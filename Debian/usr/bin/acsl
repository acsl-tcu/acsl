#! /bin/bash

##############################################
## Initilize
##############################################
function initialize_project() {
  if [[ $# -eq 3 ]];then 
    TARGET=_${3#_}  #  means : ${PROJECT}${TARGET} = $1_$3 if $3 exists
  else
    TARGET=""
  fi
  PROJECT=${1}
  RID=$2
  cat <<_EOT_
  Initialize acsl project
    PROJECT : $PROJECT
    TARGET : $TARGET
    ROS DOMAIN ID : $RID
_EOT_
  if [ -d ./.acsl ]; then # すでに .acslフォルダがある場合
    source ./.acsl/bashrc
  else
    cfs=$(ls .)
    if [[ -n $cfs ]];then # 空フォルダの場合はそこを作業フォルダに
      git clone git@github.com:acsl-tcu/project_${PROJECT}
      cd project_${PROJECT}
    else
      git clone git@github.com:acsl-tcu/project_${PROJECT} .
    fi
    ACSL_WORK_DIR="$(pwd)"
    ACSL_ROS2_DIR="$(pwd)/.acsl"
    echo "create .acsl folder"
    git clone git@github.com:acsl-tcu/ros2.git .acsl
    chmod -R a+x $ACSL_ROS2_DIR/0_host_commands
    chmod -R a+x $ACSL_ROS2_DIR/4_docker/common/scripts
  fi
  source $ACSL_ROS2_DIR/4_docker/common/scripts/super_echo
  $ACSL_ROS2_DIR/0_host_commands/setup_bashrc $ACSL_WORK_DIR $@
  
  source $ACSL_ROS2_DIR/bashrc
  echo "After setup_bashrc $ACSL_ROS2_DIR"

  ###########################################
  ## New project
  ###########################################
  if [[ ! -f ${PROJECT}${TARGET}.rules ]]; then
    rule_file="default.rules"
    tmp=$(uname -a | grep "raspberrypi")
    if [[ -n $tmp ]]; then
      rule_file="default_raspberry.rules"
      echo $rule_file
    fi
    tmp=$(uname -a | grep "jetson")
    if [[ -n $tmp ]]; then
      rule_file="default_jetson.rules"
      echo $rule_file
    fi
    tmp=$(uname -a | grep "microsoft")
    if [[ -n $tmp ]]; then
      rule_file="default.rules"
      echo $rule_file
    fi
    cp -p $ACSL_ROS2_DIR/rules/$rule_file ./${PROJECT}${TARGET}.rules
  fi

  if [[ ! -f project_launch${TARGET}.sh ]]; then
    cp -p $ACSL_ROS2_DIR/0_host_commands/project_launch_sh ./project_launch.sh
  fi
  if [[ ! -d 1_ros_launcher ]];then 
    mkdir 1_ros_launcher
  fi
  if [[ ! -d 2_ros_packages ]];then 
    mkdir 2_ros_packages
  fi
  #############################################

  chmod a+x project_launch${TARGET}.sh
  chmod -R a+x 1_ros_launcher
  if [[ -f ${PROJECT}${TARGET}.rules ]];then 
    $ACSL_ROS2_DIR/0_host_commands/setup_udev ${PROJECT}${TARGET}.rules
  fi
  if [[ -d 3_dockerfiles${TARGET} ]];then
    for i in $(ls 3_dockerfiles${TARGET}/dockerfile.*) ; do 
      dockerfile_dpull $i
    done
  fi
  $ACSL_ROS2_DIR/0_host_commands/setup_systemd $ACSL_WORK_DIR/project_launch${TARGET}.sh
  bash
}


#############################################################
# Package install
#############################################################
# Usageを表示
function usage() {
  echo $1
  cat <<_EOT_
Usage:
  $(basename $0) [-a] [-B] [-b bargv] ...

Description:
  XXX

Options:
  -a オプションa
  -B オプションB
  -b オプションbの引数値を指定
  -h ヘルプ表示

_EOT_
  exit 1
}

# オプションフラグ用変数初期化
function initOptionFlags() {
  for char in {{a..z},{A..Z}}; do
    eval OPT_FLAG_${char}=0
  done
}

# オプション解析結果を表示
function printOptions() {
  echo "### 指定オプション一覧"
  for char in {{a..z},{A..Z}}; do
    opt=$(eval echo \${OPT_FLAG_${char}:-""})
    optarg=$(eval echo \${OPT_VALUE_${char}:-""})
    if [[ $opt = 1 ]]; then
      echo "opt=-${char} ${optarg:+optarg=${optarg}}"
    fi
  done
  echo
}

function set_udev() {
  if [[ -f ${1} ]]; then
    echo "### $PACKAGE ###" >>${PROJECT}${TARGET}.rules
    cat ${1} >>${PROJECT}${TARGET}.rules
    echo "### $PACKAGE END ###" >>${PROJECT}${TARGET}.rules
    $ACSL_ROS2_DIR/0_host_commands/setup_udev ${PROJECT}${TARGET}.rules
  fi
}

function remove_udev() {
  echo "Remove udev"
  PACKAGE=$1
  UDEV_TARGET=${PROJECT}${TARGET}.rules
  RULES="### $PACKAGE ###"
  RULEE="### $PACKAGE END ###"
  # 文字列Aが含まれる行の行数を取得
  lines=($(grep -n "$RULES" "$UDEV_TARGET" | cut -d: -f1))
  linee=($(grep -n "$RULEE" "$UDEV_TARGET" | cut -d: -f1))
  if [[ -n $lines ]]; then
    sed -i -e "${lines},${linee}d" $UDEV_TARGET
  fi
}
function remove_systemd() {
  echo "Remove systemd"
  PACKAGE=$1
  SYSD_TARGET=project_launch${TARGET}.sh
  LAUNCHS="### $PACKAGE ###"
  LAUNCHE="### $PACKAGE END ###"
  # 文字列Aが含まれる行の行数を取得
  lines=($(grep -n "$LAUNCHS" "$SYSD_TARGET" | cut -d: -f1))
  linee=($(grep -n "$LAUNCHE" "$SYSD_TARGET" | cut -d: -f1))
  if [[ -n $lines ]]; then
    sed -i -e "${lines},${linee}d" $SYSD_TARGET
  fi
}

function update_tag_list(){
  # function to update tag_list file in $ACSL_ROS2_DIR
  cd $ACSL_ROS2_DIR
  git checkout .
  res=$(docker run --rm quay.io/skopeo/stable:v1.9.2 list-tags --debug docker://kasekiguchi/acsl-common)
  res=$(echo ${res##*[})
  res=$(echo ${res%%]*})
  echo ${res//,/} >> $ACSL_ROS2_DIR/tag_list
  git add .
  git commit -m "update tag_list"
  git push
}

function dpull_check_tag(){
  tag=$1
  res=$(cat $ACSL_ROS2_DIR/tag_list | grep -w $tag)
  if [[ -n res ]]; then
    $ACSL_ROS2_DIR/0_host_commands/scripts/dpull $tag    
  else
    recho "Not found the image with $tag\n Request update tag list"
  fi
}

function dockerfile_dpull(){
  TAG=${1##*dockerfile.}
  dpull_check_tag $TAG
}

function install_package() {
  if [[ -v ACSL_ROS2_DIR ]]; then
    # オプションフラグ用変数初期化(OPT_FLAG_[a-zA-Z])
    initOptionFlags

    # getoptsでの引数判定
    # l : launch file
    # r : udev.rule file
    # L : launch file sample
    # R : udev.rules file sample
    # D : dockerfile sample
    while getopts ":l:r:LRDh" OPT; do
      case $OPT in
      h)
        usage "Help"
        continue
        ;;
      :)
        usage "[ERROR] Option argument is undefined."
        continue
        ;;
      \?)
        usage "[ERROR] Undefined options."
        continue
        ;;
      esac
      # オプション解析
      eval OPT_FLAG_${OPT}=1
      eval OPT_VALUE_${OPT}=${OPTARG:-""}
    done

    # getopts分の引数値移動
    shift $(($OPTIND - 1))

    # オプション表示
    printOptions

    # 引数の数を確認
    echo "### 引数一覧"
    for argv in $@; do
      echo ${argv}
    done
    echo
    PACKAGE=${1}
    cat <<_EOT_
  Install package to acsl project
    PROJECT : $PROJECT
    ROS DOMAIN ID : $ROS_DOMAIN_ID
    PACKAGE : $1
_EOT_
    if [[ $OPT_FLAG_L = 1 ]]; then
      if [[ -f $ACSL_ROS2_DIR/1_ros_launcher/launch_$PACKAGE.sh ]]; then
        cp -p $ACSL_ROS2_DIR/1_ros_launcher/launch_$PACKAGE.sh launch_sample.sh
        echo "sample launch file \"./launch_sample.sh\" is generated."
      else
        echo $ACSL_ROS2_DIR/1_ros_launcher/launch_$PACKAGE.sh
        echo "No default launch file exists."
      fi
    fi
    if [[ $OPT_FLAG_R = 1 ]]; then
      if [[ -f $ACSL_ROS2_DIR/rules/$PACKAGE.rules ]]; then
        cp -p $ACSL_ROS2_DIR/rules/$PACKAGE.rules sample.rules
        echo "sample udev.rules file \"./sample.rules\" is generated."
      else
        echo "No default rule file exists."
      fi
    fi
    if [[ $OPT_FLAG_D = 1 ]]; then
      if [[ -f $ACSL_ROS2_DIR/4_docker/dockerfiles/dockerfile.$PACKAGE ]]; then
        cp -p $ACSL_ROS2_DIR/4_docker/dockerfiles/dockerfile.$PACKAGE dockerfile.sample
        echo "sample docker file \"./dockerfile.sample\" is generated."
      else
        echo "No default docker file exists."
      fi
    fi

    ####################################
    ##  Install package main
    ####################################
    if [ "$OPT_FLAG_L" != 1 -a "$OPT_FLAG_R" != 1 -a "$OPT_FLAG_D" != 1 ]; then
      if [[ ! -d $ACSL_WORK_DIR/.install ]]; then
        mkdir $ACSL_WORK_DIR/.install
        cd $ACSL_WORK_DIR/.install
        git clone git@github.com:acsl-tcu/ros_package main
        cd -
      fi
      # update package_list
      cd $ACSL_WORK_DIR/.install/main
      git fetch
      package_list=($(git branch -a|grep remote | grep -v HEAD |grep -v main| sed -e "s|remotes/origin/||g"))
      cd $ACSL_WORK_DIR

      if [[ -n $(echo ${package_list[@]}|fmt -1|grep -x $PACKAGE) ]];then 
        ## udev.rule
        remove_udev $PACKAGE
        ## systemd
        remove_systemd $PACKAGE

        if [[ -d $ACSL_WORK_DIR/.install/$PACKAGE ]]; then
          cd $ACSL_WORK_DIR/.install/$PACKAGE
          git pull
          cd $ACSL_WORK_DIR
        else
          git clone -b $PACKAGE --depth 1 git@github.com:acsl-tcu/ros_package $ACSL_WORK_DIR/.install/$PACKAGE
        fi 

        echo "Set udev rule"
        if [[ $OPT_FLAG_r = 1 ]]; then
          set_udev ${OPT_VALUE_r} 
        else
          set_udev $ACSL_WORK_DIR/.install/$PACKAGE/${PACKAGE}.rules
        fi


        echo "Set ros launch"
        if [[ $OPT_FLAG_l = 1 ]]; then
          ROS_LAUNCH=$(ls -v ./1_ros_launcher/ | grep ${OPT_VALUE_l} | fmt | awk '{print $NF}')
          LAUNCH_FILE_NAME=${OPT_VALUE_l}_$((${ROS_LAUNCH/*_/} + 1))
          cp ${OPT_VALUE_l} ./1_ros_launcher/$LAUNCH_FILE_NAME
        else
          cp -rp $ACSL_WORK_DIR/.install/$PACKAGE/1_ros_launcher/* $ACSL_WORK_DIR/1_ros_launcher/
        fi
        chmod -R a+x ./1_ros_launcher

        if [[ -d $ACSL_WORK_DIR/.install/$PACKAGE/2_ros_packages ]]; then
          echo "Install ROS package"
          cp -rp $ACSL_WORK_DIR/.install/$PACKAGE/2_ros_packages/* $ACSL_WORK_DIR/2_ros_packages/
        fi

        if [[ -f $ACSL_WORK_DIR/.install/$PACKAGE/3_dockerfiles/dockerfile.${PACKAGE} ]];then 
          echo "Pull Docker image : dockerfile.${PACKAGE}"
          cp $ACSL_WORK_DIR/.install/$PACKAGE/3_dockerfiles/dockerfile.${PACKAGE} $ACSL_WORK_DIR/3_dockerfiles${TARGET}/
          dpull_check_tag $PACKAGE
        fi

        echo "set project_launch${TARGET}.sh"
        echo "### $PACKAGE ###" >>project_launch${TARGET}.sh
        echo "$ACSL_ROS2_DIR/0_host_commands/scripts/dup $@" >>project_launch${TARGET}.sh
        echo "### $PACKAGE END ###" >>project_launch${TARGET}.sh

        $ACSL_ROS2_DIR/0_host_commands/scripts/dup all
      else
        recho "make package first as a branch on 'ros_package' repo"
      fi

    fi

  else
    recho "initialize first by run : acsl init PROJECT RID"
  fi
  exit 1
}

###################################################
function remove_package() {
  echo "Remove package"
  PACKAGE=$1
  ## udev.rule
  remove_udev $PACKAGE
  ## systemd
  remove_systemd $PACKAGE
  ## ros launch
  source $ACSL_ROS2_DIR/bashrc
  rm -fr $ACSL_WORK_DIR/1_ros_launcher/launch_${PACKAGE}*
  ## ros package
  rm -fr $ACSL_WORK_DIR/.install/${PACKAGE}
  ## docker image
  drmi $PACKAGE
}


###################################################
# Main part
###################################################
if [[ -v "$ACSL_ROS2_DIR" ]]; then
  echo $ACSL_ROS2_DIR
  source $ACSL_ROS2_DIR/bashrc  
fi
case ${1} in
"init")
  if [ $# -ge 3 -a [ -d .acsl ]]; then
    initialize_project ${@:2:($# - 1)}
  elif [[ -d .acsl ]];then 
    source .acsl/bashrc
    if [ $# -ge 2 ];then 
      if [ $PROJECT == $2 ];then
        PROJECT=$2
      else
        recho "Do you mean to switch the project?
  In this case, you need to clean the project first by
  > acsl clean"
      fi
    fi
    if [ $# -ge 3 ];then
      ROS_DOMAIN_ID=$3
    fi
    if [ $# -ge 4 ];then
      TARGET=$4
    fi
    initialize_project $PROJECT $ROS_DOMAIN_ID $TARGET
  else
    echo "Usage : acsl init project_name ros_domain_id"
  fi
  ;;
"install")
  if [ $# -ge 2 ]; then
    echo "install packages : ${@:2:($# - 1)}"
    install_package ${@:2:($# - 1)}
  else
    echo "Usage : ascl install package_name"
  fi
  ;;
"remove")
  if [ $# -ge 2 ]; then
    echo "remove packages : ${@:2:($# - 1)}"
    remove_package ${@:2:($# - 1)}
  else
    echo "Usage : acsl remove package_name"
  fi
  ;;
"update_tag_list")
    update_tag_list
  ;;
"clean")
  cd $ACSL_WORK_DIR
  if [[ -v ORGPATH ]]; then
    export PATH="$ORGPATH"
    echo "Delete after ORGPATH line"
    #sed -i '/ORGPATH/,$d' ~/.bashrc
    rm -f $ACSL_ROS2_DIR/bashrc

    echo "Delete project file"
    cd $ACSL_WORK_DIR
    rm -fr $ACSL_WORK_DIR/project_launch*.sh $ACSL_WORK_DIR/project_launch.service $ACSL_WORK_DIR/1_ros_launcher
    
    # udev 登録解除
    echo "Deactivate udev"
    rm -f $ACSL_WORK_DIR/$PROJECT*.rules $ACSL_WORK_DIR/.rules
    sudo rm -f /etc/udev/rules.d/90-custom.rules
    sudo udevadm control --reload-rules
    sudo udevadm trigger
    
    # systemd 登録解除
    echo "Unload systemd"
    sudo systemctl stop project_launch
    sudo systemctl daemon-reload
    sudo rm /etc/systemd/system/project_launch.service
    # .acsl 削除
    echo "Delete .acsl"
    rm -fr $ACSL_WORK_DIR/.acsl $ACSL_WORK_DIR/.install
    rm -fr $ACSL_WORK_DIR/LICENSE $ACSL_WORK_DIR/README.md $ACSL_WORK_DIR/.git*
    rm -fr $ACSL_WORK_DIR/2_ros_packages $ACSL_WORK_DIR/3_dockerfiles*
  fi
  ;;
esac
