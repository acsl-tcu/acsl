#! /bin/bash

##############################################
## Initilize
##############################################
function initialize_project() {
  if [[ $# -eq 3 ]];then 
    TARGET=_${3#_}  #  means : ${PROJECT}${TARGET} = $1_$3 if $3 exists
  else
    TARGET=""
  fi
  PROJECT=${1}
  RID=$2
  cat <<_EOT_
  Initialize acsl project
    PROJECT : $PROJECT
    TARGET : $TARGET
    ROS DOMAIN ID : $RID
_EOT_
  if [ -d ./.acsl ]; then # すでに .acslフォルダがある場合
    echo "Already exists: load bashrc"
    source ./.acsl/bashrc
  else
    cfs=$(ls .)
    if [[ -z $cfs ]];then 
      echo "Load project: project_${PROJECT}"
      git clone git@github.com:acsl-tcu/project_${PROJECT} .  --recurse-submodules
    else
      echo "Run in empty folder."
      exit
    fi
    ACSL_WORK_DIR="$(pwd)"
    ACSL_ROS2_DIR="$(pwd)/.acsl"
    echo "create .acsl folder"
    git clone git@github.com:acsl-tcu/ros2.git .acsl --recurse-submodules
    chmod -R a+x $ACSL_ROS2_DIR/0_host_commands
    chmod -R a+x $ACSL_ROS2_DIR/4_docker/common/scripts
  fi
  source $ACSL_ROS2_DIR/4_docker/common/scripts/super_echo
  $ACSL_ROS2_DIR/0_host_commands/setup_bashrc $ACSL_WORK_DIR $@
  
  source $ACSL_ROS2_DIR/bashrc
  echo "After setup_bashrc $ACSL_ROS2_DIR"

  ###########################################
  ## New project
  ###########################################
  if [[ ! -d 1_launcher ]];then 
  # if [[ ! -f ${PROJECT}${TARGET}.rules ]]; then
    rule_file="default.rules"
    tmp=$(uname -a | grep "raspberrypi")
    if [[ -n $tmp ]]; then
      rule_file="default_raspberry.rules"
      echo $rule_file
    fi
    tmp=$(uname -a | grep "jetson")
    if [[ -n $tmp ]]; then
      rule_file="default_jetson.rules"
      echo $rule_file
    fi
    tmp=$(uname -a | grep "microsoft")
    if [[ -n $tmp ]]; then
      rule_file="default.rules"
      echo "Set default rules(empty) :  $rule_file"
    fi
    cp -p $ACSL_ROS2_DIR/rules/$rule_file ./${PROJECT}${TARGET}.rules
    mkdir 1_launcher
    mkdir 2_ros_packages
    cp -p $ACSL_ROS2_DIR/0_host_commands/project_launch_sh ./project_launch.sh
    $ACSL_ROS2_DIR/0_host_commands/scripts/dpull base
  fi
  #### New project end ###############################

  if [[ -f ${PROJECT}${TARGET}.rules ]];then 
    gecho "Setup UDEV"
    $ACSL_ROS2_DIR/0_host_commands/setup_udev ${PROJECT}${TARGET}.rules
  fi

  gecho "DOCKER"
  echo "Search image_${PROJECT}${TARGET}"
  dpull_check_tag image_${PROJECT}${TARGET}
  echo "Search DOCKER IMAGE in 3_dockerfiles${TARGET}"
  if [[ -d 3_dockerfiles${TARGET} ]];then
    echo "pull compatible docker image"
    for i in $(ls 3_dockerfiles${TARGET}/dockerfile.*) ; do 
      echo "image: $i"
      dockerfile_dpull $i
    done
  fi
  chmod -R a+x 1_launcher
  if [[ -f project_launch${TARGET}.sh ]];then 
    chmod a+x project_launch${TARGET}.sh
#    $ACSL_ROS2_DIR/0_host_commands/setup_systemd $ACSL_WORK_DIR/project_launch${TARGET}.sh
  fi
  bash 

  gecho "Do following command every login
  acsl $ACSL_ROS2_DIR"
}


#############################################################
# Assets
#############################################################
# Usageを表示
function usage() {
  echo $1
  cat <<_EOT_
Usage:
  $(basename $0) [-a] [-B] [-b bargv] ...

Description:
  XXX

Options:
  -a オプションa
  -B オプションB
  -b オプションbの引数値を指定
  -h ヘルプ表示

_EOT_
  exit 1
}

# オプションフラグ用変数初期化
function initOptionFlags() {
  for char in {{a..z},{A..Z}}; do
    eval OPT_FLAG_${char}=0
  done
}

# オプション解析結果を表示
function printOptions() {
  echo "### 指定オプション一覧"
  for char in {{a..z},{A..Z}}; do
    opt=$(eval echo \${OPT_FLAG_${char}:-""})
    optarg=$(eval echo \${OPT_VALUE_${char}:-""})
    if [[ $opt = 1 ]]; then
      echo "opt=-${char} ${optarg:+optarg=${optarg}}"
    fi
  done
  echo
}

function set_udev() {
  if [[ -f ${1} ]]; then
    echo "### $PACKAGE ###" >>${PROJECT}${TARGET}.rules
    cat ${1} >>${PROJECT}${TARGET}.rules
    echo "### $PACKAGE END ###" >>${PROJECT}${TARGET}.rules
    $ACSL_ROS2_DIR/0_host_commands/setup_udev ${PROJECT}${TARGET}.rules
  fi
}

function remove_udev() {
  echo "Delete : /etc/udev/rules.d/90-custom.rules"
  sudo rm -f /etc/udev/rules.d/90-custom.rules
  echo "Reload : udevadm control --reload-rules"
  sudo udevadm control --reload-rules
  echo "Start : udevadm trigger"
  sudo udevadm trigger
}

function remove_systemd() {
  echo "Stop project_launch : systemctl stop project_launch"
  sudo systemctl stop project_launch
  echo "Delete /etc/systemd/system/project_launch.service"
  sudo rm -f /etc/systemd/system/project_launch.service
  echo "reload : systemctl daemon-reload"
  sudo systemctl daemon-reload
}

function remove_udev_installed_package() {
  echo "Remove udev"
  PACKAGE=$1
  UDEV_TARGET=${PROJECT}${TARGET}.rules
  RULES="### $PACKAGE ###"
  RULEE="### $PACKAGE END ###"
  # 文字列Aが含まれる行の行数を取得
  lines=($(grep -n "$RULES" "$UDEV_TARGET" | cut -d: -f1))
  linee=($(grep -n "$RULEE" "$UDEV_TARGET" | cut -d: -f1))
  if [[ -n $lines ]]; then
    sed -i -e "${lines},${linee}d" $UDEV_TARGET
  fi
  $ACSL_ROS2_DIR/0_host_commands/setup_udev ${PROJECT}${TARGET}.rules  
}

function remove_systemd_installed_package(){
  echo "Remove systemd"
  PACKAGE=$1
  SYSD_TARGET=project_launch${TARGET}.sh
  LAUNCHS="### $PACKAGE ###"
  LAUNCHE="### $PACKAGE END ###"
  # 文字列Aが含まれる行の行数を取得
  lines=($(grep -n "$LAUNCHS" "$SYSD_TARGET" | cut -d: -f1))
  linee=($(grep -n "$LAUNCHE" "$SYSD_TARGET" | cut -d: -f1))
  if [[ -n $lines ]]; then
    sed -i -e "${lines},${linee}d" $SYSD_TARGET
  fi
}

function update_tag_list(){
  # function to update tag_list file in $ACSL_ROS2_DIR
  echo UPDATE TAG_LIST
  cd $ACSL_ROS2_DIR
  git checkout .
  res=$(docker run --rm quay.io/skopeo/stable:v1.9.2 list-tags --debug docker://kasekiguchi/acsl-common)
  res=$(echo ${res##*[})
  res=$(echo ${res%%]*})
  echo ${res//,/} > $ACSL_ROS2_DIR/tag_list
  
  ## PROJECT_LIST
  echo UPDATE PROJECT_LIST
  project_list=$(gh repo list acsl-tcu | grep project |fmt | awk '{print $1}'| sed -e "s|acsl-tcu/project_||g")
  echo $project_list > $ACSL_ROS2_DIR/project_list

  ## PACKAGE_LIST
  echo UPDATE PACKAGE_LIST
  gh repo clone acsl-tcu/acsl_package temp
  cd temp
  git branch -a | grep /origin|grep -v HEAD| sed 's|remotes/origin/||g' > $ACSL_ROS2_DIR/package_list
  cd ..
  rm -fr temp

## 登録
  git add .
  git commit -m "update tag_list, package_list and project_list"
  git push
}

function dpull_check_tag(){
  # $1 = TAG_NAME
  # docker pull image with TAG_NAME if TAG_NAME in tag_list
  tag=$1
  res=$(cat $ACSL_ROS2_DIR/tag_list | grep -w $tag)
  if [[ -n $res ]]; then
    gecho DOCKER PULL: image $tag
    $ACSL_ROS2_DIR/0_host_commands/scripts/dpull $tag    
  else
    recho "Not found the image with $tag\n Request update tag list"
  fi
}

function dockerfile_dpull(){
  # $1 = dockerfile.TAG_NAME
  # docker pull image with TAG_NAME if it exists
  TAG=${1##*dockerfile.}
  dpull_check_tag $TAG
}

#############################################################
# package install
#############################################################

function install_package() {
  if [[ -v ACSL_ROS2_DIR ]]; then
    # オプションフラグ用変数初期化(OPT_FLAG_[a-zA-Z])
    initOptionFlags

    # getoptsでの引数判定
    # l : launch file
    # r : udev.rule file
    # L : launch file sample
    # R : udev.rules file sample
    # D : dockerfile sample
    while getopts ":l:r:LRDh" OPT; do
      case $OPT in
      h)
        usage "Help"
        continue
        ;;
      :)
        usage "[ERROR] Option argument is undefined."
        continue
        ;;
      \?)
        usage "[ERROR] Undefined options."
        continue
        ;;
      esac
      # オプション解析
      eval OPT_FLAG_${OPT}=1
      eval OPT_VALUE_${OPT}=${OPTARG:-""}
    done

    # getopts分の引数値移動
    shift $(($OPTIND - 1))

    # オプション表示
    printOptions

    # 引数の数を確認
    echo "### 引数一覧"
    for argv in $@; do
      echo ${argv}
    done
    echo
    PACKAGE=${1}
    cat <<_EOT_
  Install package to acsl project
    PROJECT : $PROJECT
    ROS DOMAIN ID : $ROS_DOMAIN_ID
    PACKAGE : $1
_EOT_
    if [[ $OPT_FLAG_L = 1 ]]; then
      if [[ -f $ACSL_ROS2_DIR/1_launcher/launch_$PACKAGE.sh ]]; then
        cp -p $ACSL_ROS2_DIR/1_launcher/launch_$PACKAGE.sh launch_sample.sh
        echo "sample launch file \"./launch_sample.sh\" is generated."
      else
        echo $ACSL_ROS2_DIR/1_launcher/launch_$PACKAGE.sh
        echo "No default launch file exists."
      fi
    fi
    if [[ $OPT_FLAG_R = 1 ]]; then
      if [[ -f $ACSL_ROS2_DIR/rules/$PACKAGE.rules ]]; then
        cp -p $ACSL_ROS2_DIR/rules/$PACKAGE.rules sample.rules
        echo "sample udev.rules file \"./sample.rules\" is generated."
      else
        echo "No default rule file exists."
      fi
    fi
    if [[ $OPT_FLAG_D = 1 ]]; then
      if [[ -f $ACSL_ROS2_DIR/4_docker/dockerfiles/dockerfile.$PACKAGE ]]; then
        cp -p $ACSL_ROS2_DIR/4_docker/dockerfiles/dockerfile.$PACKAGE dockerfile.sample
        echo "sample docker file \"./dockerfile.sample\" is generated."
      else
        echo "No default docker file exists."
      fi
    fi

    ####################################
    ##  Install package main
    ####################################
    if [ "$OPT_FLAG_L" != 1 -a "$OPT_FLAG_R" != 1 -a "$OPT_FLAG_D" != 1 ]; then
      if [[ ! -d $ACSL_WORK_DIR/.install ]]; then
        mkdir $ACSL_WORK_DIR/.install
        cd $ACSL_WORK_DIR/.install
        git clone git@github.com:acsl-tcu/acsl_package main  --recurse-submodules
        cd -
      fi
      # update package_list
      cd $ACSL_WORK_DIR/.install/main
      git fetch
      package_list=($(git branch -a|grep remote | grep -v HEAD |grep -v main| sed -e "s|remotes/origin/||g"))
      cd $ACSL_WORK_DIR

      if [[ -n $(echo ${package_list[@]}|fmt -1|grep -x $PACKAGE) ]];then 
        ## udev.rule
        remove_udev_installed_package $PACKAGE
        ## systemd
        remove_systemd_installed_package $PACKAGE

        if [[ -d $ACSL_WORK_DIR/.install/$PACKAGE ]]; then
          cd $ACSL_WORK_DIR/.install/$PACKAGE
          git pull
          cd $ACSL_WORK_DIR
        else
          git clone -b $PACKAGE --depth 1 git@github.com:acsl-tcu/acsl_package $ACSL_WORK_DIR/.install/$PACKAGE  --recurse-submodules
        fi 

        echo "Set udev rule"
        if [[ $OPT_FLAG_r = 1 ]]; then
          set_udev ${OPT_VALUE_r} 
        else
          set_udev $ACSL_WORK_DIR/.install/$PACKAGE/${PACKAGE}.rules
        fi


        echo "Set ros launch"
        if [[ $OPT_FLAG_l = 1 ]]; then
          ROS_LAUNCH=$(ls -v ./1_launcher/ | grep ${OPT_VALUE_l} | fmt | awk '{print $NF}')
          LAUNCH_FILE_NAME=${OPT_VALUE_l}_$((${ROS_LAUNCH/*_/} + 1))
          mkdir -p ./1_launcher
          cp ${OPT_VALUE_l} ./1_launcher/$LAUNCH_FILE_NAME
        else
          mkdir -p $ACSL_WORK_DIR/1_launcher
          cp -rp $ACSL_WORK_DIR/.install/$PACKAGE/1_launcher/* $ACSL_WORK_DIR/1_launcher/
        fi
        chmod -R a+x ./1_launcher

        if [[ -d $ACSL_WORK_DIR/.install/$PACKAGE/2_ros_packages ]]; then
          echo "Install ROS package"
          mkdir -p $ACSL_WORK_DIR/2_ros_packages
          cp -rp $ACSL_WORK_DIR/.install/$PACKAGE/2_ros_packages/* $ACSL_WORK_DIR/2_ros_packages/
        fi

        if [[ -f $ACSL_WORK_DIR/.install/$PACKAGE/3_dockerfiles/dockerfile.${PACKAGE} ]];then 
          echo "Pull Docker image : dockerfile.${PACKAGE}"
          mkdir -p $ACSL_WORK_DIR/3_dockerfiles${TARGET}
          cp $ACSL_WORK_DIR/.install/$PACKAGE/3_dockerfiles/dockerfile.${PACKAGE} $ACSL_WORK_DIR/3_dockerfiles${TARGET}/
          dpull_check_tag ${PACKAGE}
        fi

        echo "set project_launch${TARGET}.sh"
        echo "### $PACKAGE ###" >>project_launch${TARGET}.sh
        echo "$ACSL_ROS2_DIR/0_host_commands/scripts/dup $@" >>project_launch${TARGET}.sh
        echo "### $PACKAGE END ###" >>project_launch${TARGET}.sh

        $ACSL_ROS2_DIR/0_host_commands/scripts/dup all
      else
        recho "make package first as a branch on 'ros_package' repo"
      fi

    fi

  else
    recho "initialize first by run : acsl init PROJECT RID"
  fi
  exit 1
}

###################################################
function remove_package() {
  echo "Remove package"
  PACKAGE=$1
  ## udev.rule
  remove_udev_installed_package $PACKAGE
  ## systemd
  remove_systemd_installed_package $PACKAGE
  ## ros launch
  source $ACSL_ROS2_DIR/bashrc
  rm -fr $ACSL_WORK_DIR/1_launcher/launch_${PACKAGE}*
  ## ros package
  rm -fr $ACSL_WORK_DIR/.install/${PACKAGE}
  ## docker image
  drmi $PACKAGE
}


##################################################
function git_pull() {
  .acsl/4_docker/common/scripts/gpull $1
}
function colcon_build() {
  .acsl/0_host_commands/scripts/build_project $@
}
function docker_push() {
  .acsl/0_host_commands/scripts/dpush image_${PROJECT}${TARGET}
}
###################################################
# Information
###################################################
function info(){
case ${1} in
"init")
  ;;
"install")
  ;;
"remove")
  ;;
"update_tag_list")
  ;;
"update")
  ;;
"freeze")
  ;;
"clean")
echo "[Usage] acsl clean"
echo "To clean up all"
  ;;
"make_package")
echo "[Usage] acsl make_package package_name"
echo "create new package"
echo "After setup the package, push it to github."
echo "Then install the package into your project by acsl install package."
echo "Build the docker image and dpush it."
    ;;
esac
}

function check_acsl(){
  if [[ -v ORGPATH ]]; then 
    echo ACTIVE ACSL project
  else
    exit
    #return 0 
  fi
}
###################################################
# Main part
###################################################
if [[ -d .acsl ]];then 
  echo "Load settings"
  source .acsl/bashrc  
fi
case ${1} in
  "init")
# acsl init PROJECT RID (TARGET)
  if [ $# -ge 3 ] && [ ! -d .acsl ]; then
    initialize_project ${@:2:($# - 1)}
  elif [[ -d .acsl ]];then 
    update_project ${@:2:($# - 1)}
  else
    echo "Usage : acsl init project_name ros_domain_id"
  fi
  ;;
  "install")
  check_acsl
# acsl install package run_args
# To install package
  if [ $# -ge 2 ]; then
    echo "install packages : ${@:2:($# - 1)}"
    install_package ${@:2:($# - 1)}
  else
    echo "Usage : ascl install package_name"
  fi
  ;;
  "remove")
  check_acsl
# acsl remove package_name
# To remove package
  if [ $# -ge 2 ]; then
    echo "remove packages : ${@:2:($# - 1)}"
    remove_package ${@:2:($# - 1)}
  else
    echo "Usage : acsl remove package_name"
  fi
  ;;
  "update_tag_list")
  check_acsl
# acsl update_tag_list 
# run @ admin PC
  update_tag_list
  ;;
  "update")
  check_acsl
# acsl update ros_packages
  if [[ -d .acsl ]];then 
    echo "Update project files from github"
    git_pull
    colcon_build ${@:2:($# - 1)}
    # update_project ${@:2:($# - 1)}
  else
    echo "Couldn't find project files. Move to the project folder."
  fi
  ;;
  "freeze")
  check_acsl
# acsl freeze (packages)
# Update project folder, and rebuild and upload image_${PROJECT}${TARGET}
  if [[ -v $ACSL_WORK_DIR ]]; then
    echo "Update project folder, and rebuild and upload image_${PROJECT}${TARGET}"
    git_pull
    colcon_build ${@:2:($# - 1)}
    docker_push
  else
    echo "I'm frozen ..."
  fi
  ;;
  "clean")
  check_acsl
# acsl clean
# To clean up all
  cd $ACSL_WORK_DIR
  echo "Delete ALL ACSL system"
  export PATH="$ORGPATH"
  echo "Delete after ORGPATH line"
  #sed -i '/ORGPATH/,$d' ~/.bashrc
  rm -f $ACSL_ROS2_DIR/bashrc

  echo "Delete project file"
  cd $ACSL_WORK_DIR
  rm -fr $ACSL_WORK_DIR/project_launch*.sh $ACSL_WORK_DIR/project_launch.service $ACSL_WORK_DIR/1_launcher
  
  # udev 登録解除
  echo "Deactivate udev"
  rm -f $ACSL_WORK_DIR/$PROJECT*.rules $ACSL_WORK_DIR/.rules
  remove_udev

  # systemd 登録解除
  echo "Unload systemd"
  remove_systemd

  # .acsl 削除
  echo "Delete .acsl"
  sudo rm -fr $ACSL_WORK_DIR/.acsl $ACSL_WORK_DIR/.install
  sudo rm -fr $ACSL_WORK_DIR/LICENSE $ACSL_WORK_DIR/README.md $ACSL_WORK_DIR/.git*
  sudo rm -fr $ACSL_WORK_DIR/2_ros_packages $ACSL_WORK_DIR/3_dockerfiles*
  ;;
  "make_package")
    cd ~
    git clone --depth 1 git@github.com:acsl-tcu/acsl_package.git --recurse-submodules
    cd acsl_package
    git checkout -b $2
    git push -u origin $2
  ;;
  "autorun")
    check_acsl
    echo "setup systemd for autorun "
    echo "After complete, reboot and check the ros node works"
    chmod -R a+x $ACSL_WORK_DIR/1_launcher
    if [[ -f project_launch${TARGET}.sh ]];then 
      chmod a+x $ACSL_WORK_DIR/project_launch${TARGET}.sh
      $ACSL_ROS2_DIR/0_host_commands/setup_systemd $ACSL_WORK_DIR/project_launch${TARGET}.sh
    fi
  ;;
  "remove_autorun")
    remove_systemd
  ;;
  "info")
  info $2
  ;;
  *)
    cd ~/$1
    source .acsl/bashrc
    exec bash
  ;;
esac
info $1


