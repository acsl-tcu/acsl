#! /bin/bash

##############################################
## Initilize
##############################################
function initialize_project() {
  PROJECT=$1
  RID=$2
  cat <<_EOT_
  Initialize acsl project
    PROJECT : $PROJECT
    ROS DOMAIN ID : $RID
_EOT_
  ACSL_ROS2_DIR="$(pwd)/.acsl"
  if [ -d ./.acsl ]; then # すでに .acslフォルダがある場合
    source ~/.bashrc
  else
    echo "create .acsl folder"
    git clone https://github.com/acsl-tcu/ros2.git .acsl
    chmod -R a+x $ACSL_ROS2_DIR/0_host_commands
    chmod -R a+x $ACSL_ROS2_DIR/1_docker/common/scripts
  fi
  #cd $ACSL_ROS2_DIR/0_host_commands
  #bash ./setup.sh $1 $2
  $ACSL_ROS2_DIR/0_host_commands/setup_bashrc $@
  rule_file="default.rules"
  tmp=$(uname -a | grep "raspberrypi")
  if [[ -n $tmp ]]; then
    rule_file="default_raspberry.rules"
    echo $rule_file
  fi
  tmp=$(uname -a | grep "jetson")
  if [[ -n $tmp ]]; then
    rule_file="default_jetson.rules"
    echo $rule_file
  fi
  tmp=$(uname -a | grep "microsoft")
  if [[ -n $tmp ]]; then
    rule_file="default.rules"
    echo $rule_file
  fi
  cp -p $ACSL_ROS2_DIR/1_docker/common/rules/$rule_file ./$PROJECT.rules
  cp -p $ACSL_ROS2_DIR/0_host_commands/project_launch_sh ./project_launch.sh
  $ACSL_ROS2_DIR/0_host_commands/setup_systemd $ACSL_ROS2_DIR/../project_launch.sh
  if [[ ! -d ros_launch ]];then 
    mkdir ros_launch
  fi
  dpull_check_tag image_$PROJECT
  bash
}

#############################################################
# Package install
#############################################################
# Usageを表示
function usage() {
  echo $1
  cat <<_EOT_
Usage:
  $(basename $0) [-a] [-B] [-b bargv] ...

Description:
  XXX

Options:
  -a オプションa
  -B オプションB
  -b オプションbの引数値を指定
  -h ヘルプ表示

_EOT_
  exit 1
}

# オプションフラグ用変数初期化
function initOptionFlags() {
  for char in {{a..z},{A..Z}}; do
    eval OPT_FLAG_${char}=0
  done
}

# オプション解析結果を表示
function printOptions() {
  echo "### 指定オプション一覧"
  for char in {{a..z},{A..Z}}; do
    opt=$(eval echo \${OPT_FLAG_${char}:-""})
    optarg=$(eval echo \${OPT_VALUE_${char}:-""})
    if [[ $opt = 1 ]]; then
      echo "opt=-${char} ${optarg:+optarg=${optarg}}"
    fi
  done
  echo
}

function remove_udev() {
  echo "Remove udev"
  PACKAGE=$1
  TARGET=$PROJECT.rules
  RULES="### $PACKAGE ###"
  RULEE="### $PACKAGE END ###"
  # 文字列Aが含まれる行の行数を取得
  lines=($(grep -n "$RULES" "$TARGET" | cut -d: -f1))
  linee=($(grep -n "$RULEE" "$TARGET" | cut -d: -f1))
  if [[ -n $lines ]]; then
    sed -e "${lines},${linee}d" $TARGET
  fi
}
function remove_systemd() {
  echo "Remove systemd"
  PACKAGE=$1
  TARGET=project_launch.sh
  LAUNCHS="### $PACKAGE ###"
  LAUNCHE="### $PACKAGE END ###"
  # 文字列Aが含まれる行の行数を取得
  lines=($(grep -n "$LAUNCHS" "$TARGET" | cut -d: -f1))
  linee=($(grep -n "$LAUNCHE" "$TARGET" | cut -d: -f1))
  if [[ -n $lines ]]; then
    sed -e "${lines},${linee}d" $TARGET
  fi
}

function update_tag_list(){
  cd $ACSL_ROS2_DIR
  git checkout .
  res=$(docker run --rm quay.io/skopeo/stable:v1.9.2 list-tags --debug docker://kasekiguchi/acsl-common)
  res=$(echo ${res##*[})
  res=$(echo ${res%%]*})
  res=(${res//,/}) >> $ACSL_ROS2_DIR/tag_list
  git add .
  git commit -m "update tag_list"
  git push
}

function dpull_check_tag(){
  tag=$1
  res=$(cat $ACSL_ROS2_DIR/tag_list | grep $tag)
  if [[ -n res ]]; then
    dpull $tag    
  fi
}

function install_package() {
  if [[ -v ACSL_ROS2_DIR ]]; then
    # オプションフラグ用変数初期化(OPT_FLAG_[a-zA-Z])
    initOptionFlags

    # getoptsでの引数判定
    # l : launch file
    # r : udev.rule file
    # L : launch file sample
    # R : udev.rules file sample
    # D : dockerfile sample
    while getopts ":l:r:LRDh" OPT; do
      case $OPT in
      h)
        usage "Help"
        continue
        ;;
      :)
        usage "[ERROR] Option argument is undefined."
        continue
        ;;
      \?)
        usage "[ERROR] Undefined options."
        continue
        ;;
      esac
      # オプション解析
      eval OPT_FLAG_${OPT}=1
      eval OPT_VALUE_${OPT}=${OPTARG:-""}
    done

    # getopts分の引数値移動
    shift $(($OPTIND - 1))

    # オプション表示
    printOptions

    # 引数の数を確認
    echo "### 引数一覧"
    for argv in $@; do
      echo ${argv}
    done
    echo
    PACKAGE=${1}
    cat <<_EOT_
  Install package to acsl project
    PROJECT : $PROJECT
    ROS DOMAIN ID : $RID
    PACKAGE : $1
_EOT_
    if [[ $OPT_FLAG_L = 1 ]]; then
      if [[ -f $ACSL_ROS2_DIR/1_docker/common/ros_launcher/launch_$PACKAGE.sh ]]; then
        cp -p $ACSL_ROS2_DIR/1_docker/common/ros_launcher/launch_$PACKAGE.sh launch_sample.sh
        echo "sample launch file \"./launch_sample.sh\" is generated."
      else
        echo $ACSL_ROS2_DIR/1_docker/common/ros_launcher/launch_$PACKAGE.sh
        echo "No default launch file exists."
      fi
    fi
    if [[ $OPT_FLAG_R = 1 ]]; then
      if [[ -f $ACSL_ROS2_DIR/1_docker/common/rules/$PACKAGE.rules ]]; then
        cp -p $ACSL_ROS2_DIR/1_docker/common/rules/$PACKAGE.rules sample.rules
        echo "sample udev.rules file \"./sample.rules\" is generated."
      else
        echo "No default rule file exists."
      fi
    fi
    if [[ $OPT_FLAG_D = 1 ]]; then
      if [[ -f $ACSL_ROS2_DIR/1_docker/dockerfiles/dockerfile.$PACKAGE ]]; then
        cp -p $ACSL_ROS2_DIR/1_docker/dockerfiles/dockerfile.$PACKAGE dockerfile.sample
        echo "sample docker file \"./dockerfile.sample\" is generated."
      else
        echo "No default docker file exists."
      fi
    fi

    if [ "$OPT_FLAG_L" != 1 -a "$OPT_FLAG_R" != 1 -a "$OPT_FLAG_D" != 1 ]; then
      remove_package $PACKAGE
      echo "Set udev rule"
      echo "### $PACKAGE ###" >>${PROJECT}.rules
      if [[ $OPT_FLAG_r = 1 ]]; then
        cat ${OPT_VALUE_r} >>${PROJECT}.rules
      elif [[ -f $ACSL_ROS2_DIR/1_docker/common/rules/${PACKAGE}.rules ]]; then
        cat $ACSL_ROS2_DIR/1_docker/common/rules/${PACKAGE}.rules >>${PROJECT}.rules
      fi
      echo "### $PACKAGE END ###" >>${PROJECT}.rules
      $ACSL_ROS2_DIR/0_host_commands/setup_udev ${PROJECT}.rules
  
      echo "Set ros launch"
      if [[ -f $ACSL_ROS2_DIR/1_docker/common/ros_launcher/launch_$PACKAGE.sh ]];then
        cp -p $ACSL_ROS2_DIR/1_docker/common/ros_launcher/launch_$PACKAGE.sh ./ros_launcher/
        else
        touch ./ros_launcher/launch_$PACKAGE.sh
      fi
      if [[ $OPT_FLAG_l = 1 ]]; then
        ROS_LAUNCH=$(ls -v ./ros_launcher/ | grep ${OPT_VALUE_l} | fmt | awk '{print $NF}')
        LAUNCH_FILE_NAME=${OPT_VALUE_l}_$((${ROS_LAUNCH/*_/} + 1))
        cp ${OPT_VALUE_l} ./ros_launcher/$LAUNCH_FILE_NAME
      fi
      echo "### $PACKAGE ###" >>project_launch.sh
      echo "$ACSL_ROS2_DIR/0_host_commands/scripts/dup $@" >>project_launch.sh
      echo "### $PACKAGE END ###" >>project_launch.sh

      source ~/.bashrc
      dpull_check_tag $PACKAGE
    fi

  else
    echo "initialize first"
  fi
  exit 1
}

###################################################
function remove_package() {
  echo "Remove package"
  PACKAGE=$1
  ## udev.rule
  remove_udev $PACKAGE
  ## systemd
  remove_systemd $PACKAGE
  ## ros launch
  rm -f ros_launcher/launch_${PACKAGE}.sh*
  ## docker image
  drmi $PACKAGE
}

###################################################
# Main part
###################################################
source ~/.bashrc
echo $ACSL_ROS2_DIR
case ${1} in
"init")
  if [ $# -eq 3 ]; then
    initialize_project ${@:2:($# - 1)}
  else
    echo "Usage : acsl init project_name ros_domain_id"
  fi
  ;;
"install")
  if [ $# -ge 2 ]; then
    echo "install packages : ${@:2:($# - 1)}"
    install_package ${@:2:($# - 1)}
  else
    echo "Usage : ascl install package_name"
  fi
  ;;
"remove")
  if [ $# -ge 2 ]; then
    echo "remove packages : ${@:2:($# - 1)}"
  else
    echo "Usage : acsl remove package_name"
  fi
  ;;
"update_tag_list")
    bash -c update_tag_list
  ;;
"clean")
  if [[ -v ORGPATH ]]; then
    export PATH="$ORGPATH"
    echo "Delete after ORGPATH line"
    sed -i '/ORGPATH/,$d' ~/.bashrc

    echo "Delete project file"
    cd $ACSL_ROS2_DIR/../
    rm -fr project_launch.sh project_launch.service ros_launch
    
    # udev 登録解除
    echo "Deactivate udev"
    rm -f *.rules .rules
    sudo rm -f /etc/udev/rules.d/90-custom.rules
    sudo udevadm control --reload-rules
    sudo udevadm trigger
    
    # systemd 登録解除
    echo "Unload systemd"
    sudo rm /etc/systemd/system/project_launch.service
    sudo systemctl stop project_launch
    sudo systemctl daemon-reload
    # .acsl 削除
    echo "Delete .acsl"
    rm -fr .acsl
  fi
  ;;
esac
